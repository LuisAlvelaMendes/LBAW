options {
 LOOKAHEAD=1;
}

PARSER_BEGIN(JvmGrammar)

public class JvmGrammar
{
    public static void main(String args[]) throws ParseException {
        JvmGrammar myGrammar = new JvmGrammar(System.in);
        SimpleNode root = myGrammar.Program();
        root.dump("");
    }
}

PARSER_END(JvmGrammar)

SKIP :
{
" " | "\r" | "\t" | "\n"
}

TOKEN: // RESERVED WORDS
{
 <NEW: "new">   
 | <WHILE: "while">
 | <IF: "if">
 | <ELSE: "else">
 | <THIS: "this">
 | <INT: "int">
 | <TRUE: "true">
 | <FALSE: "false">
 | <CLASS: "class">
 | <PUBLIC: "public">
 | <LENGTH: "length">
 | <RETURN: "return">
 | <BOOLEAN: "boolean">
 | <EXTENDS: "extends">
 | <VOID: "void">
 | <MAIN: "main">
 | <STATIC: "static">
 | <STRING: "String">
}

TOKEN: // IDENTIFIERS
{
 < IDENTIFIER : <LETTER> (<LETTER> | <DIGIT>)* >
 | < #LETTER : ["$","A"-"Z","_","a"-"z"] >
 | < #DIGIT : ["0"-"9"] >
 | < INTEGERLITERAL : "0" | (["1"-"9"] (<DIGIT>)*) >
}

SimpleNode Program() : {}
{
 ClassDeclaration() <EOF>
}

void ClassDeclaration() : {}
{
 "class" <IDENTIFIER> ("extends" <IDENTIFIER>)? 
 "{" (VarDeclaration())*  
 ( "public"(MainDeclaration() | MethodDeclaration()) )* "}"
}

void VarDeclaration() : {}
{
 Type() <IDENTIFIER> ";"
}

void MainDeclaration() : {}
{
    "static" "void" "main" 
    "(" "String" "[" "]" <IDENTIFIER> ")" 
    "{" (VarDeclaration())* (Statement())* "}"
}

void MethodDeclaration() : {}
{
  Type() <IDENTIFIER> "(" MethodArguments() ")" 
 "{" (VarDeclaration())* (Statement())* 
 "return" Expression() ";" "}"
}

void MethodArguments() : {}
{
    (Type() <IDENTIFIER> ("," MethodArgumentPiece())*)?
}

void MethodArgumentPiece() : {}
{
    Type() <IDENTIFIER>
}

void Type() : {}
{
 "int" ("[" "]")?
 | "boolean"
 | <IDENTIFIER>
}

void Statement() : {}
{
 "{" (Statement())* "}"
 | "if" "(" Expression() ")" Statement() "else" Statement()
 | "while" "(" Expression() ")" Statement()
 | Expression() ";"
 | <IDENTIFIER> ("=" Expression() ";" | "[" Expression() "]" "=" Expression() ";")
}

void Expression() : {}
{
 (<INTEGERLITERAL> | <IDENTIFIER>) (Expression1() | Expression2())?
 | ("this" | <IDENTIFIER>) (Expression3())? 
 | "true"
 | "false"
 | "new" ("int" "[" Expression3() "]" | <IDENTIFIER> "(" ")")
 | "!" Expression3()
 | "(" Expression3() ")"
}

void Expression1() : {}
{
    ("&&" | "<" | "+" | "-" | "*" | "/") Expression()
}

void Expression2() : {}
{
    "[" Expression() "]"
}

void Expression3() : {}
{
    "." ("length" | <IDENTIFIER> "(" (Expression() ("," Expression())*)? ")")
}