/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Projeto.jj */
/*@egen*/options {
 LOOKAHEAD=1;
}

PARSER_BEGIN(JvmGrammar)

public class JvmGrammar/*@bgen(jjtree)*/implements JvmGrammarTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTJvmGrammarState jjtree = new JJTJvmGrammarState();

/*@egen*/
    public static void main(String args[]) throws ParseException {
        JvmGrammar myGrammar = new JvmGrammar(System.in);
        SimpleNode root = myGrammar.Program();
        root.dump("");
    }
}

PARSER_END(JvmGrammar)

SKIP :
{
" " | "\r" | "\t"
}

TOKEN: // RESERVED WORDS
{
 <NEW: "new">   
 | <WHILE: "while">
 | <IF: "if">
 | <ELSE: "else">
 | <THIS: "this">
 | <INT: "int">
 | <TRUE: "true">
 | <FALSE: "false">
 | <CLASS: "class">
 | <PUBLIC: "public">
 | <LENGTH: "length">
 | <RETURN: "return">
 | <BOOLEAN: "boolean">
 | <EXTENDS: "extends">
}

TOKEN: // IDENTIFIERS
{
 < IDENTIFIER : <LETTER> (<LETTER> | <DIGIT>)* >
 | < #LETTER : ["$","A"-"Z","_","a"-"z"] >
 | < #DIGIT : ["0"-"9"] >
 | < INTEGERLITERAL : "0" | (["1"-"9"] (<DIGIT>)*) >
}

SimpleNode Program() : {/*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
 try {
/*@egen*/
 ClassDeclaration() <EOF>/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void ClassDeclaration() : {/*@bgen(jjtree) ClassDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ClassDeclaration */
 try {
/*@egen*/
 "class" <IDENTIFIER> ("extends" <IDENTIFIER>)? "{" (VarDeclaration())*  (MethodDeclaration())* "}"/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void VarDeclaration() : {/*@bgen(jjtree) VarDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTVARDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VarDeclaration */
 try {
/*@egen*/
 Type() <IDENTIFIER> ";"/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void MethodDeclaration() : {/*@bgen(jjtree) MethodDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodDeclaration */
 try {
/*@egen*/
 "public" Type() <IDENTIFIER> "(" MethodArguments() ")" 
 "{" (VarDeclaration())* (Statement())* "return" Expression() ";" "}"/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void MethodArguments() : {/*@bgen(jjtree) MethodArguments */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodArguments */
    try {
/*@egen*/
    (Type() <IDENTIFIER> ("," MethodArgumentPiece())*)?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MethodArgumentPiece() : {/*@bgen(jjtree) MethodArgumentPiece */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODARGUMENTPIECE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodArgumentPiece */
    try {
/*@egen*/
    Type() <IDENTIFIER>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Type() : {/*@bgen(jjtree) Type */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Type */
 try {
/*@egen*/
 "int" ("[" "]")?
 | "boolean"
 | <IDENTIFIER>/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void Statement() : {/*@bgen(jjtree) Statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Statement */
 try {
/*@egen*/
 "{" (Statement())* "}"
 | "if" "(" Expression() ")" Statement() "else" Statement()
 | "while" "(" Expression() ")" Statement()
 | Expression() ";"
 | <IDENTIFIER> ("=" Expression() ";" | "[" Expression() "]" "=" Expression() ";")/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void Expression() : {/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
 try {
/*@egen*/
 (<INTEGERLITERAL> | <IDENTIFIER>) (Expression1() | Expression2())?
 | ("this" | <IDENTIFIER>) (Expression3())? 
 | "true"
 | "false"
 | "new" ("int" "[" Expression3() "]" | <IDENTIFIER> "(" ")")
 | "!" Expression3()
 | "(" Expression3() ")"/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void Expression1() : {/*@bgen(jjtree) Expression1 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression1 */
    try {
/*@egen*/
    ("&&" | "<" | "+" | "-" | "*" | "/") Expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Expression2() : {/*@bgen(jjtree) Expression2 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression2 */
    try {
/*@egen*/
    "[" Expression() "]"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Expression3() : {/*@bgen(jjtree) Expression3 */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION3);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression3 */
    try {
/*@egen*/
    "." ("length" | <IDENTIFIER> "(" (Expression() ("," Expression())*)? ")")/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}